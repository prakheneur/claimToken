
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface TokenContract {
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}


contract TokenClaimProxy {
    address public owner;
    TokenContract public tokenContract;

    mapping(address => uint256) public userBalances;

    constructor(address _tokenAddress) {
        owner = msg.sender;
        tokenContract = TokenContract(_tokenAddress);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    function setUserBalance(address user, uint256 amount) external onlyOwner {
        userBalances[user] = amount;
    }

    function claimTokens() external {
        uint256 amountToClaim = userBalances[msg.sender];
        require(amountToClaim > 0, "No tokens to claim");

        userBalances[msg.sender] = 0; // Reset user balance

        bool success = tokenContract.transfer(msg.sender, amountToClaim);
        require(success, "Token transfer failed");
    }

    function changeOwner(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid new owner address");
        owner = newOwner;
    }
}

