
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenProxy is Ownable {
    IERC20 public tokenContract;  // The ERC20 token contract

    mapping(address => uint256) public claimedTokens;

    event TokensClaimed(address indexed user, uint256 amount);

    constructor(address _tokenAddress) {
        tokenContract = IERC20(_tokenAddress);
    }

    // Function to allow the contract owner to set initial user balances
    function setInitialBalances(address[] calldata users, uint256[] calldata balances) external onlyOwner {
        require(users.length == balances.length, "Input arrays must have the same length");

        for (uint256 i = 0; i < users.length; i++) {
            claimedTokens[users[i]] = balances[i];
        }
    }


    
    // Function to allow users to claim their tokens
function claimTokens() external {
    uint256 userBalance = claimedTokens[msg.sender];
    require(userBalance > 0, "No tokens to claim");
    
    claimedTokens[msg.sender] = 0;  // Reset user's claimed balance
    
    tokenContract.transfer(msg.sender, userBalance);  // Transfer tokens to the user
    emit TokensClaimed(msg.sender, userBalance);
}


  
}
